



getPhiPDF <- function(psi_evals, grids) {
    K = length(grids)
    phi <- c(0, cumsum(psi_evals[-K] * diff(grids)))

    pdf <- exp(phi)
    pdf <- pdf / sum((pdf[-1] + pdf[-K]) * diff(grids) / 2)
    phi <- log(pdf)
}


## Gives
##   LCM( densities cdot Q )^{(R)} cdot F
## evaluated on xs
## where Q, F are the quantile and CDF with respect to 
## "densities", represented as evaluations over "grids"
##
##
## INPUT: densities -- vector of density values
##        grids -- domain of "densities"
##      
##        k -- number of discrete points between [0,1] at which 
##             to evaluate Jhat and (psi^*)??
##
## OUTPUT: psi -- function  R -> R
##         psi_deriv -- function  R -> R
##
isotonizeDensity <- function(densities, grids, k=1000){
  require(fdrtool)

  k = max(k, length(grids))

  # Interpolate between density values on the grid
  f <- approxfun(grids, densities, method = "linear", rule = 2)
  Fx <- cumsum(densities * c(0, diff(grids)))
  Fx <- Fx / Fx[length(grids)]
  F <- approxfun(grids, Fx, method = "linear", rule = 2)
  # In case F has constant pieces:
  Fx[duplicated(Fx)] <- Fx[duplicated(Fx)] + 1e-12
  Q <- approxfun(Fx, grids, method = "linear", rule = 2, ties = max)
  # No need to determine quantiles numerically:
  # Q <- function(u){brent(function(x) {F(x) - u}, min(x) - 1, max(x) + 1)$root}
  # Q <- sapply(u, Q)
  
  u <- 0:k / k
  J <- f(Q(u))
  init_scores <- diff(J) * k

  res = isoProjInterpolate(init_scores, u)
  psi = res[["iso_fn"]]
  psi_deriv = res[["iso_fn_deriv"]]

  return(list(psi=psi, psi_deriv=psi_deriv))
}

## Gives
##   iso_fn = IsoRegress(init_fn)
## represented as a function, and its derivative
## 
## Assumes "init_fn" are evaluations at "grids"
## 
##
## INPUT:  init_fn -- vector of evaluations
##         grids -- points in R at which we evaluate the initial score
##
## OUTPUT: iso_fn -- function  R -> R
##         iso_fn_deriv -- function R -> R
## note that if grids is not the quantiles, the output is not antitonic projection
isoProjInterpolate <- function(init_fn, grids){
    require(Iso)
    require(stats)
    
    K = length(grid)

    iso_fn_evals <- pava(init_fn, decreasing = FALSE,
                            long.out = FALSE, stepfun = FALSE)
    iso_fn <- approxfun(grids, iso_fn_evals, rule=2) # linear interpolation

    iso_fn_deriv <- approxfun(grids[-K], diff(iso_fn_evals)/diff(grids),
                                method="constant", rule=2)

    return(list(iso_fn=iso_fn, iso_fn_deriv=iso_fn_deriv))
}


## Gives
## general spline score matching function and its derivative evaluated at the knots
## no monotone constraint, no symmetricity of the noise assumed
## INPUT:  Z -- vector of the noise proxies, i.e. the residuals
##         lambda -- penalization coefficient
##
## OUTPUT: psistars -- (psi*(Z1),...,psi*(Zn))
##         psistarprimes -- (psi*'(Z1),...,psi*'(Zn))
##
splineScoreEst <- function(Z, lambda) {
  N = length(Z)
  
  Z_sorted = sort(Z)
  deltas = diff(Z_sorted)
  
  A <- diag(N)
  diag(A[-1,]) <- -1
  
  B <- diag(N)
  diag(B[-1,]) <- 1
  
  W <- diag(c(0,1/deltas))
  
  v <- N:1
  AAt_inv <- pmin(matrix(v, nrow = N, ncol = length(v), byrow = TRUE), matrix(v, nrow = N, ncol = length(v), byrow = FALSE)) #solve(A%*%t(A))
  A_Binv <- matrix(2, ncol = N, nrow = N)
  A_Binv[upper.tri(A_Binv, diag = TRUE)] <- 0
  A_Binv <- A_Binv + diag(N)
  A_Binv <- A_Binv*sign(toeplitz(1:N%%2) - 0.5)#A%*%solve(B)
  
  TEMP <- diag(c(1, deltas^2))%*%AAt_inv + 12*lambda*W
  Schur <- TEMP[-1, -1]
  Schur <- solve(Schur - matrix(TEMP[-1, 1])%*%t(matrix(TEMP[1, -1]))/TEMP[1, 1])
  TEMP <- -t(matrix(TEMP[1, -1]))%*%Schur/TEMP[1, 1]
  TEMP <- 6*lambda*rbind(TEMP, Schur)
  TEMP <- cbind(rep(0, N), TEMP)
  # TEMP is D in the spline note
  # gstar = (g*(T1),...,g*(Tn)) is the negative score; gstarprime = (g*'(T1),...,g*'(Tn))
  gstarprime <- solve(lambda*(t(A_Binv)%*%W%*%A_Binv + 3*W) - 6*lambda*W^2%*%TEMP, (N:1)%%2)
  gstar <- TEMP%*%gstarprime
  gstarprime <- cumsum(gstarprime*sign((1:N)%%2 - 0.5))*sign((1:N)%%2 - 0.5)#solve(B)%*%gstarprime
  gstar <- cumsum(gstar) #solve(A)%*%gstar
  
  return(list("psistars" = -gstar, "psistarprimes" = -gstarprime))
}

splineScore <- function(xs, knots, psistars, psistarprimes){
  N<-length(knots)
  deltaknots<-diff(knots)
  secantslopes<-diff(psistars)/deltaknots
  sumpsiprime<-psistarprimes[-N]+psistarprimes[-1]
  sumpsiprime1<-2*psistarprimes[-N]+psistarprimes[-1]
  psixs<-rep(0, length(xs))
  index<-findInterval(xs, knots)
  
  int_indicator = index > 0 & index < N
  int_xs = xs[int_indicator]
  int_index = index[int_indicator]
  
  psixs[index==0] <- psistars[1] + psistarprimes[1] * (xs[index==0] - knots[1])
  psixs[index==N] <- psistars[N] + psistarprimes[N] * (xs[index==N] - knots[N])

  y <- (int_xs - knots[int_index]) / deltaknots[int_index]
  temp <- psistarprimes[int_index] * y + (3 * secantslopes[int_index] - sumgprime1[int_index]) * y^2 + 
    (sumgprime[int_index] - 2 * secantslopes[int_index]) * y^3
  temp<-temp*deltaknots[int_index]+psistars[int_index]
  psixs[int_indicator]<-temp
  return(psixs)
}

## INPUT:  quantiles -- hat{F^{-1}}(i/K), i in [K]
##         psistars -- psi*(quantiles)
## isoProjInterpolate(psistars=splineScore(quantiles), quantiles)


## monotone spline without the symmetricity assumption
## INPUT:  Z -- vector of the noise proxies, i.e. the residuals
##         lambda -- penalization coefficient
##
## OUTPUT: psistars -- (psi*(T1),...,psi*(Tn))
##         psistarprimes -- (psi*'(T1),...,psi*'(Tn))
## We only implement the version that Ti=Z_{(i)}.
## The argimin is piecewise quadratic and is uniquely determined by psistars and psistarprimes.
## The evaluation of psistar can be achieved via eval_quad_Score
antitonicScoreMatch <- function(Z, lambda){

    N = length(Z)

    Z_sorted = sort(Z)
    deltas = diff(Z_sorted)

    u = c(0, rep(1, N))
    L = t(matrix(replicate(N, c(2, deltas)), ncol=N))
    L[upper.tri(L)] = 0
    A<-diag(x = 1, nrow = N, ncol = N+1)
    diag(A[-1, 3:(N+1)]) = 1
    #A[1, 1] = 1
    A[1, 1] = -1

    D = diag(1/deltas*lambda)
    B = diag(x = 1, nrow = N-1, ncol = N)
    diag(B[, -1]) = -1
    #B above is not the B in the spline_opt.tex; we removed the first all 0 column here; see the tex file;
    #we only use it to calculate the non-zero lower right block of the second term of the Hessian matrix

    Q = t(B) %*% D %*% B  #non-zero lower right block of the second term of the Hessian matrix
    Q = cbind(rep(0, N), Q)
    Q = rbind(rep(0, N+1), Q) #the second term of the Hessian matrix
    Q = 0.25 * crossprod(L %*% A) + Q #Hessian
    
    #G=(-g(T_1),g'(T_1),g'(T_2),...,g'(T_N))
    G = solve(Q, u)

    #gvals_before = L %*% A %*% G /2 #the unconstrained piecewise quadratic argmin

    # projShape = function(w){
    #     w[-1][ w[-1] < 0 ] = 0
    #     return(w)
    # }

    # G = projShape(G)
    G[G<0] <- 0 #projection

    MAXITER = 20
    for (i in 1:MAXITER){
        cat("Newton loop loss", 
            t(G)%*%Q%*%G - 2*t(u) %*% G,"\n")
        alpha = 1

        Free = (G > 0) | (Q %*% G - u <= 0)
        # Free[1] = TRUE

        Gtmp = G 
        gradient = (Q %*% G - u)[Free]
        update = solve(Q[Free, Free], gradient)

        Gtmp[Free] = G[Free] - alpha * update
        # Gtmp[Free] = projShape(Gtmp[Free])
        Gtemp[Free][Gtemp[Free]<0]<-0 #projection

        while (t(Gtmp)%*% Q %*%Gtmp-2*t(u)%*%Gtmp > 
                t(G)%*% Q %*%G-2*t(u)%*%G+0.5*t((Gtmp-G)[Free])%*%(2*gradient)) {
            alpha = 0.8 * alpha
            Gtmp[Free] = G[Free] - alpha*update
            # Gtmp[Free] = projShape(Gtmp[Free])
            Gtemp[Free][Gtemp[Free]<0]<-0 #projection
        }
        if (sum((Gtmp-G)^2)<1e-30){
            cat("Last update has Euclidean norm ", sum((Gtmp-G)^2), '\n')
            G = Gtmp
            break
        }
        G = Gtmp
    }

    gvals_after = L %*% A %*% G/2 #gvals_after = (g*(T1),...,g*(Tn))
    # gvalues<-G[-1]
    # gvalues<-gvalues[-1]+gvalues[-N]
    # gvalues<-0.5*gvalues*deltas
    # for (j in 2:(N-1)) {
    #   gvalues[j]<-gvalues[j]+gvalues[j-1]
    # }
    # gvalues<-c(-G[1],-G[1]+gvalues) #gvalues = (g*(T1),...,g*(Tn))
    # gprimes<-G[-1] #gprimes = (g'(T_1),g'(T_2),...,g'(T_N))

    return(list("psistars" = -gvals_after, "psistarprimes" = -G[-1]))
}


## score (and optionally its derivative) evaluated at a set of points, xs
## monotone piecewise quadratic spline without the symmetricity assumption
## 
## INPUT:  xs -- points of inquiry
##         psivals -- psi(knots)
##         psiprimes -- psiprime(knots)
##         deltas -- diff(knots)
##
## OUTPUT: psixs -- psi(xs)
##         psiprimexs -- psiprime(xs), if derivative = TRUE
eval_quad_Score <- function(xs, knots, psivals, psiprimes, robust = FALSE, deltas = FALSE, derivative = FALSE){

    N = length(knots)
    if (!deltas){
      deltas = diff(knots)
    }
    psixs = rep(0, length(xs))
    
    index = findInterval(xs, knots)
    distoleft = xs - knots[index]
    
    ## xs inside the range of knots
    int_indicator = index > 0 & index < N
    int_xs = xs[int_indicator]
    int_index = index[int_indicator]

    psivals_left = psivals[int_index]
    # distoleft = int_xs - knots[int_index]

    int_psixs = psivals_left + distoleft[int_indicator] * psiprimes[int_index] +
        0.5*(psiprimes[int_index+1]-psiprimes[int_index])*distoleft[int_indicator]^2 / deltas[int_index]

    psixs[int_indicator] = int_psixs
    
    left_indicator = index == 0
    right_indicator = index == N
    
    if(!robust){
      psixs[left_indicator] = psivals[1] + distoleft[left_indicator] * psiprimes[1]
      psixs[right_indicator] = psivals[N] + distoleft[right_indicator] * psiprimes[N]
    } else {
      ## set psi(x) for x outside the knots: robust psi
      psixs[left_indicator] = psivals[1]
      psixs[right_indicator] = psivals[N]
    }
    
    if(derivative){
      psiprimexs = rep(0, length(xs))
      psiprimevals_left = psiprimes[int_index]
      
      int_psiprimexs = psiprimevals_left + 
        (psiprimes[int_index+1]-psiprimes[int_index])*distoleft[int_indicator] / deltas[int_index]
      
      psiprimexs[int_indicator] = int_psiprimexs
      if(!robust){
        psiprimexs[left_indicator] = psiprimexs[1]
        psiprimexs[right_indicator] = psiprimexs[N]
      } else {
        ## set psi'(x) for x outside the knots: robust psi
        psiprimexs[left_indicator] = 0
        psiprimexs[right_indicator] = 0
      }
      return(list("psixs" = psixs, "psiprimexs" = psiprimexs))
    }
    return(psixs)
}



# evalScoreDeriv <- function(xs, knots, gvals, gprimes){
# 
#     N = length(knots)
#     deltas = diff(knots)
# 
#     index = findInterval(xs, knots)
#     
#     gxprimes = rep(0, length(xs))
#     ## set g(x) for x outside the knots: robust -psi
#     gxprimes[index == 0] = 0
#     gxprimes[index == N] = 0
# 
#     int_xs = xs[index > 0 & index < N]
#     int_index = index[index > 0 & index < N]
# 
#     gprimes_left = gprimes[int_index]
#     distoleft = int_xs - knots[int_index]
# 
#     int_gxprimes = gprimes_left + 
#         distoleft * (gprimes[int_index+1] - gprimes_left) / deltas[int_index]
#     
#     gxprimes[index > 0 & index < N] = int_gxprimes
#     return(gxprimes)
# }