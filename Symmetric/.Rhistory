# CC<-C[-1]
# CC<-CC[-1]+CC[-N]
# CC<-0.5*CC*deltaX
# for (j in 2:(N-1)) {
#   CC[j]<-CC[j]+CC[j-1]
# }
# CC<-c(-C[1],CC-C[1])
# sum(CC^2)-t(C)%*%crossprod(D1%*%A)%*%C*0.25
################################################
D2<-diag(1/deltaX*lambda) #lambda=lambda0*2*N*sd(X)^3
B<-diag(x=1, nrow = N-1, ncol = N)
diag(B[,-1])<--1
####test if the matrix expression is correct####
# C<-runif(N+1, min=-0.3, max=0.2)
# CC<-C[-1]
# CC<-CC[-1]-CC[-N]
# CC<-CC^2/deltaX
# Hess<-t(B)%*%D2%*%B #Hess=0.5Hessian, (Hess%*%C-u)=0.5gradient
# Hess<-cbind(rep(0,N),Hess)
# Hess<-rbind(rep(0,N+1),Hess)
# lambda*sum(CC)-t(C)%*%He
D1
B
B<-diag(x=1, nrow = N-1, ncol = N)
diag(B[,-1])<--1
B
D2 <- diag(1 / delta_Residual * lambda) #lambda =  lambda_0 * 2 * N * sd(X)^3
D2
N
B <- diag(x = 1, nrow = N-1, ncol = N)
diag(B[, -1]) <- -1
B
#library(RSpectra) #svds() used in gradient descent
library(ggplot2)
library(gridExtra)
library(gnorm) #to generate generalized Gaussian
#library(quadprog) #solve.QP(), off-the-shelf quadratic programming
#rm(list = ls())  # clear all variables in workspace
#graphics.off()  # clear all plots
##set the penalization coefficient
lambda0 <-0.0001
##sample size
N<-1000
##generate data
# X<-rexp(N)
# X<-X*sign(runif(N,-1,1))
# X<-runif(N,-1,1)
X<-rnorm(N,0,1)
# X<-rgnorm(N, mu = 0, alpha = 1, beta = 9) #generalized Gaussian
# X<-runif(N/2,-5,-3)
# X<-c(X,runif(N/2,2.5,5.5))
#log-concave, mean=median=0, asymmetric
# X<-rnorm(N,0,1)
# negX<-X<0
# X<-runif(N,-2*sqrt(2/pi),0)*negX+X*(1-negX)
lambda<-lambda0*2*N*sd(X)^3 #sd(X)^3: to make lambda scale invariant
##setting thetapilot
thetapilot<-mean(X)
#thetapilot<-0 #oracle if the noise is symmetric
Xsorted<-sort(X-thetapilot)#T_1,T_2,...,T_N
deltaX<-diff(Xsorted)#deltaX[i]=T_{i+1}-T_i
#C=(-g(T_1),g'(T_1),g'(T_2),...,g'(T_N))
# g is -psi, monotone increasing
##small scale projected Newton
u<-c(0,rep(1,N))
D1<-t(matrix(replicate(N,c(2,deltaX)),ncol=N))
D1[upper.tri(D1)] <- 0
A<-diag(x=1, nrow = N, ncol = N+1)
diag(A[-1,3:(N+1)])<-1
A[1,1]<--1 #reparametrization, C[1]=-g(T_1)>0
####test if the matrix expression is correct####
# C<-runif(N+1, min=-0.3, max=0.2)
# CC<-C[-1]
# CC<-CC[-1]+CC[-N]
# CC<-0.5*CC*deltaX
# for (j in 2:(N-1)) {
#   CC[j]<-CC[j]+CC[j-1]
# }
# CC<-c(-C[1],CC-C[1])
# sum(CC^2)-t(C)%*%crossprod(D1%*%A)%*%C*0.25
################################################
D2<-diag(1/deltaX*lambda) #lambda=lambda0*2*N*sd(X)^3
B<-diag(x=1, nrow = N-1, ncol = N)
diag(B[,-1])<--1
####test if the matrix expression is correct####
# C<-runif(N+1, min=-0.3, max=0.2)
# CC<-C[-1]
# CC<-CC[-1]-CC[-N]
# CC<-CC^2/deltaX
# Hess<-t(B)%*%D2%*%B #Hess=0.5Hessian, (Hess%*%C-u)=0.5gradient
# Hess<-cbind(rep(0,N),Hess)
# Hess<-rbind(rep(0,N+1),Hess)
# lambda*sum(CC)-t(C)%*%Hess%*%C
################################################
Hess<-t(B)%*%D2%*%B
Hess<-cbind(rep(0,N),Hess)
Hess<-rbind(rep(0,N+1),Hess)
Hess<-0.25*crossprod(D1%*%A)+Hess #Hess=0.5*Hessian of the objective function, (Hess%*%C-u)=0.5*gradient
#Scaling<-solve(Hess)
##initialization, C=(-g(T_1),g'(T_1),g'(T_2),...,g'(T_N))
# g is -psi, monotone increasing
C<-solve(Hess,u)
C[C<0]<-0 #projection
###projected Newton
M<-20
for (i in 1:M) {
cat("Newton loop loss",t(C)%*%Hess%*%C-2*t(u)%*%C,"\n")
alpha<-1 #reset step size; more aggressive
# Fixed<-(C==0)*(Hess%*%C-u>0)
# Free<-!Fixed
Free<-(C>0)|(Hess%*%C-u<=0)
###no backtracking for alpha
# C[Free]<-C[Free]-alpha*Scaling[Free,Free]%*%(Hess%*%C-u)[Free]
# C[Free][C[Free]<0]<-0#projection
###backtracking
Ctemp<-C
gradient<-(Hess%*%C-u)[Free]
Update<-solve(Hess[Free,Free],gradient)
Ctemp[Free]<-C[Free]-alpha*Update
Ctemp[Free][Ctemp[Free]<0]<-0#projection
while (t(Ctemp)%*%Hess%*%Ctemp-2*t(u)%*%Ctemp>t(C)%*%Hess%*%C-2*t(u)%*%C+0.5*t((Ctemp-C)[Free])%*%(2*gradient)) {
alpha<-alpha*0.8
Ctemp[Free]<-C[Free]-alpha*Update
Ctemp[Free][Ctemp[Free]<0]<-0#projection
}
if(sum((Ctemp-C)^2)<1e-30){
cat("the last update has Euclidean norm",sum((Ctemp-C)^2))
C<-Ctemp
break
}
C<-Ctemp
}
###########off-the-shelf QP######################
#same result
#qp <- solve.QP(Dmat=Hess, dvec=u, Amat=diag(x=1, nrow = N+1, ncol = N+1), bvec=rep(0,N+1), meq = 0)
#sum((qp$solution-C)^2)
############################################
######## g* ########
gvalues<-C[-1]
gvalues<-gvalues[-1]+gvalues[-N]
gvalues<-0.5*gvalues*deltaX
for (j in 2:(N-1)) {
gvalues[j]<-gvalues[j]+gvalues[j-1]
}
gvalues<-c(-C[1],-C[1]+gvalues) #gvalues = (g*(T1),...,g*(Tn))
########d/dx G = g*, Negloglikelihd = (G(T1),...,G(Tn))
CC<-C[-1]
Negloglikelihd<-gvalues[-N]*deltaX+(CC[-N]/2+(CC[-1]-CC[-N])/6)*deltaX^2
for (j in 2:(N-1)) {
Negloglikelihd[j]<-Negloglikelihd[j]+Negloglikelihd[j-1]
}
normalization<-0 #normalization[i] = log(integral exp(-G)) where G(T_{N/2})=0
Negloglikelihd<-c(0,Negloglikelihd)
Negloglikelihd<-Negloglikelihd-Negloglikelihd[N/2]+normalization
#############PLOT############
tailgrid<-(1:(N/100))*mean(deltaX)
Negtailgrid<-(-(N/100):-1)*mean(deltaX)
Xplot<-c(Negtailgrid+Xsorted[1],Xsorted,tailgrid+Xsorted[N])
############# g ############
##the linear tail
NStailY<-gvalues[N]+tailgrid*C[N+1]
NSNegtailY<-gvalues[1]+Negtailgrid*C[2]
NSYplot<-c(NSNegtailY,gvalues,NStailY)
#############negative log-likelihood############
NLLtailY<-Negloglikelihd[N]+tailgrid*gvalues[N]+tailgrid^2/2*C[N+1]
NLLNegtailY<-Negloglikelihd[1]+Negtailgrid*gvalues[1]+Negtailgrid^2/2*C[2]
NLLYplot<-c(NLLNegtailY,Negloglikelihd,NLLtailY)
Xmin<-min(Xsorted)
Xmax<-max(Xsorted)
#mydf = data.frame(X = Xplot[(N/4):(N*3/4)],NScore = NSYplot[(N/4):(N*3/4)],NLL = NLLYplot[(N/4):(N*3/4)])
mydf = data.frame(X = Xplot,NScore = NSYplot,NLL = NLLYplot)
plotNS.obj <- ggplot(data=mydf)+geom_line(aes(x=X, y=NScore), color="red")+
geom_line(aes(x=X, y=(sign(X-thetapilot)+1)*(X-thetapilot)/2), color="blue")+ylab("Negative score function")+
geom_vline(xintercept = Xmin,linetype="dotted")+ geom_vline(xintercept = Xmax,linetype="dotted")
plotNLL.obj <- ggplot(data=mydf)+geom_line(aes(x=X, y=NLL), color="red")+geom_line(aes(x=X, y=(sign(X-thetapilot)+1)*(X-thetapilot)^2/4), color="blue")+
ylab("Negative log-likelihood")+ geom_vline(xintercept = Xmin,linetype="dotted")+ geom_vline(xintercept = Xmax,linetype="dotted")
grid.arrange(plotNS.obj, plotNLL.obj, ncol=2)
####################################
# ########cuts=(T1,...,Tn),gvalues=(g(T1),...,g(Tn)),CC=(g'(T1),...,g'(Tn))=C[-1],deltaX=(T2-T1,...,Tn-T{n-1})########
# gtheta<-function(theta,X1,cuts,gvalues,CC,deltaX){
#   #deltaX<-diff(cuts)
#   delta<-(X1-theta)
#   index<-findInterval(delta, cuts)
#   index[index==0]<-1#left linear region
#   Values<-gvalues[index] #g(left end point)
#   distoleft<-delta-cuts[index]
#   Values<-Values+distoleft*CC[index] #linear part
#   quadpts<-index!=length(cuts)&index!=1
#   quadindex<-index[quadpts]
#   Values[quadpts]<-Values[quadpts]+0.5*(CC[quadindex+1]-CC[quadindex])*distoleft[quadpts]^2/deltaX[quadindex]
#   return(sum(Values))
# }
# ###gprimetheta is d/dx g=-d/dtheta g
# gprimetheta<-function(theta,X1,cuts,gvalues,CC,deltaX){
#   #deltaX<-diff(cuts)
#   delta<-(X1-theta)
#   index<-findInterval(delta, cuts)
#   index[index==0]<-1#left linear region
#   Values<-CC[index] #g(left end point)
#   quadpts<-index!=length(cuts)&index!=1
#   quadindex<-index[quadpts]
#   distoleft<-delta-cuts[index]
#   Values[quadpts]<-Values[quadpts]+(CC[quadindex+1]-CC[quadindex])*distoleft[quadpts]/deltaX[quadindex]
#   return(sum(Values))
# }
# #######compare with the sample mean
# Thetahats<-NULL
# Thetatildes<-NULL
# for (j in 1:100) {
#   #X1<-runif(N,-1,1)
#   #X1<-rnorm(N)
#   #X1<-rgnorm(N, mu = 0, alpha = 1, beta = 4)
#
#   X1<-abs(rnorm(N/2,0,1))
#   X1<-c(X1,runif(N/2,-2*sqrt(2/pi),0))
#
#   thetatilde<-mean(X1)
#   thetahat<-thetatilde #initialization
#   while (abs(gtheta(thetahat,X1,Xsorted,gvalues,C[-1],deltaX))>1e-13*N) {
#     # #line search for step size
#     # alpha<-1
#     # Update<-gtheta(thetahat,X1,Xsorted,gvalues,C[-1],deltaX)/gprimetheta(thetahat,X1,Xsorted,gvalues,C[-1],deltaX)
#     # thetatemp<-thetahat+alpha*Update
#     # while (abs(gtheta(thetatemp,X1,Xsorted,gvalues,C[-1],deltaX))>abs(gtheta(thetahat,X1,Xsorted,gvalues,C[-1],deltaX))) {
#     #   alpha<-0.8*alpha
#     #   thetatemp<-thetahat+alpha*Update
#     # }
#     # thetahat<-thetatemp
#     ###no backtracking
#     Update<-gtheta(thetahat,X1,Xsorted,gvalues,C[-1],deltaX)/gprimetheta(thetahat,X1,Xsorted,gvalues,C[-1],deltaX)
#     thetahat<-thetahat+alpha*Update
#     if(abs(Update)<1e-12){break}
#   }
#   #print(abs(gtheta(thetahat,X1,Xsorted,gvalues,C[-1],deltaX)))
#   Thetahats<-c(Thetahats,abs(thetahat))
#   Thetatildes<-c(Thetatildes,abs(thetatilde)/sqrt(2))
#   #divide the |mean-theta0| by sqrt(2) to balance the extra 1000 samples used for score matching
# }
# mean(Thetahats)
# mean(Thetatildes)
2^2
mydf = data.frame(X = Xplot,NScore = NSYplot,NLL = NLLYplot)
plotNS.obj <- ggplot(data=mydf)+geom_line(aes(x=X, y=NScore), color="red")+
geom_line(aes(x=X, y=X), color="blue")+ylab("Negative score function")+
geom_vline(xintercept = Xmin,linetype="dotted")+ geom_vline(xintercept = Xmax,linetype="dotted")
plotNLL.obj <- ggplot(data=mydf)+geom_line(aes(x=X, y=NLL), color="red")+geom_line(aes(x=X, y=X^2/2), color="blue")+
ylab("Negative log-likelihood")+ geom_vline(xintercept = Xmin,linetype="dotted")+ geom_vline(xintercept = Xmax,linetype="dotted")
# plotNS.obj <- ggplot(data=mydf)+geom_line(aes(x=X, y=NScore), color="red")+
#   geom_line(aes(x=X, y=(sign(X-thetapilot)+1)*(X-thetapilot)/2), color="blue")+ylab("Negative score function")+
#   geom_vline(xintercept = Xmin,linetype="dotted")+ geom_vline(xintercept = Xmax,linetype="dotted")
# plotNLL.obj <- ggplot(data=mydf)+geom_line(aes(x=X, y=NLL), color="red")+geom_line(aes(x=X, y=(sign(X-thetapilot)+1)*(X-thetapilot)^2/4), color="blue")+
#   ylab("Negative log-likelihood")+ geom_vline(xintercept = Xmin,linetype="dotted")+ geom_vline(xintercept = Xmax,linetype="dotted")
grid.arrange(plotNS.obj, plotNLL.obj, ncol=2)
N<-5
##generate data
# X<-rexp(N)
# X<-X*sign(runif(N,-1,1))
# X<-runif(N,-1,1)
X<-rnorm(N,0,1)
# X<-rgnorm(N, mu = 0, alpha = 1, beta = 9) #generalized Gaussian
# X<-runif(N/2,-5,-3)
# X<-c(X,runif(N/2,2.5,5.5))
#log-concave, mean=median=0, asymmetric
# X<-rnorm(N,0,1)
# negX<-X<0
# X<-runif(N,-2*sqrt(2/pi),0)*negX+X*(1-negX)
lambda<-lambda0*2*N*sd(X)^3 #sd(X)^3: to make lambda scale invariant
##setting thetapilot
thetapilot<-mean(X)
#thetapilot<-0 #oracle if the noise is symmetric
Xsorted<-sort(X-thetapilot)#T_1,T_2,...,T_N
deltaX<-diff(Xsorted)#deltaX[i]=T_{i+1}-T_i
#C=(-g(T_1),g'(T_1),g'(T_2),...,g'(T_N))
# g is -psi, monotone increasing
##small scale projected Newton
u<-c(0,rep(1,N))
D1<-t(matrix(replicate(N,c(2,deltaX)),ncol=N))
D1[upper.tri(D1)] <- 0
A<-diag(x=1, nrow = N, ncol = N+1)
diag(A[-1,3:(N+1)])<-1
A[1,1]<--1 #reparametrization, C[1]=-g(T_1)>0
####test if the matrix expression is correct####
# C<-runif(N+1, min=-0.3, max=0.2)
# CC<-C[-1]
# CC<-CC[-1]+CC[-N]
# CC<-0.5*CC*deltaX
# for (j in 2:(N-1)) {
#   CC[j]<-CC[j]+CC[j-1]
# }
# CC<-c(-C[1],CC-C[1])
# sum(CC^2)-t(C)%*%crossprod(D1%*%A)%*%C*0.25
################################################
D2<-diag(1/deltaX*lambda) #lambda=lambda0*2*N*sd(X)^3
B<-diag(x=1, nrow = N-1, ncol = N)
diag(B[,-1])<--1
D2
B
N
D2
D2
library(ggplot2)
library(gridExtra)
library(Matrix)
#rm(list = ls())  # clear all variables in workspace
#graphics.off()  # clear all plots
#sample size
N<-800
##set the penalization coefficient
lambda0 <-0.001
#additive noise
# Noises<-runif(N,-1,1)
Noises<-rnorm(N,0,1)
#Noises<-c(Noises,rnorm(50,0,1))
# #log-concave, mean=median=0, asymmetric
# Noises<-rnorm(N,0,1)
# negNoises<-Noises<0
# Noises<-runif(N,-2*sqrt(2/pi),0)*negNoises+Noises*(1-negNoises)
Residualsorted<-sort(Noises)
deltaResidual<-diff(Residualsorted)
lambda<-lambda0*2*N*sd(Noises)^3 #sd(X)^3: to make lambda scale invariant
# ####################TESTING BLOCK################################################################################
# A1 <- diag(x=-1, nrow = N-1, ncol = N)
# diag(A1[,-1]) <- 1
# B1 <- diag(x=1, nrow = N-1, ncol = N)
# diag(B1[,-1]) <- 1
# W1 <- diag(1/deltaResidual)
# TEMP1 <- solve(diag(N)+12*lambda*t(A1)%*%W1^3%*%A1, 6*lambda*t(A1)%*%W1^2%*%B1)
# gstarprime1 <- solve(lambda*(t(A1)%*%W1%*%A1+3*t(B1)%*%W1%*%B1)-6*lambda*t(B1)%*%W1^2%*%A1%*%TEMP1,rep(1,N))
# gstar1 <- TEMP1%*%gstarprime1
# ########################################################################################################################
A <- diag(N)
diag(A[-1,]) <- -1
B <- diag(N)
diag(B[-1,]) <- 1
W <- diag(c(0,1/deltaResidual))
v<-N:1
AAt_inv<-pmin(matrix(v, nrow=N, ncol=length(v), byrow=TRUE),matrix(v, nrow=N, ncol=length(v), byrow=FALSE))#solve(A%*%t(A))
A_Binv<-matrix(2,ncol=N,nrow=N)
A_Binv[upper.tri(A_Binv, diag = TRUE)]<-0
A_Binv<-A_Binv+diag(N)
A_Binv<-A_Binv*sign(toeplitz(1:N%%2)-0.5)#A%*%solve(B)
TEMP<-diag(c(1,deltaResidual^2))%*%AAt_inv+12*lambda*W
Schur<-TEMP[-1,-1]
Schur<-solve(Schur-matrix(TEMP[-1,1])%*%t(matrix(TEMP[1,-1]))/TEMP[1,1])
TEMP<--t(matrix(TEMP[1,-1]))%*%Schur/TEMP[1,1]
TEMP<-6*lambda*rbind(TEMP,Schur)
TEMP<-cbind(rep(0,N),TEMP)
gstarprime <- solve(lambda*(t(A_Binv)%*%W%*%A_Binv+3*W)-6*lambda*W^2%*%TEMP,(N:1)%%2)
# gstar=(g*(T1),...,g*(Tn)) is the negative score
# gstarprime=(g*'(T1),...,g*'(Tn))
gstarprime <- solve(lambda*(t(A_Binv)%*%W%*%A_Binv+3*W)-6*lambda*W^2%*%TEMP,(N:1)%%2)
gstar <- TEMP%*%gstarprime
gstarprime <- cumsum(gstarprime*sign((1:N)%%2-0.5))*sign((1:N)%%2-0.5)#solve(B)%*%gstarprime
gstar <- cumsum(gstar)#solve(A)%*%gstar
#sum(gstar) #check == 0
#############TESTING##########################
# TEMP1 <- solve(AAt_inv+12*lambda*W^3, 6*lambda*W^2)
# gstarprime1 <- solve(lambda*(t(A_Binv)%*%W%*%A_Binv+3*W)-6*lambda*W^2%*%TEMP1,(N:1)%%2)
# gstar1 <- TEMP1%*%gstarprime1
# gstarprime1 <- cumsum(gstarprime1*sign((1:N)%%2-0.5))*sign((1:N)%%2-0.5)
# gstar1 <- cumsum(gstar1)
####################################################
#############plot g*############
tailgrid<-(1:max((N/100),7))*mean(deltaResidual)
tailY<-gstar[N]+tailgrid*gstarprime[N]
Negtailgrid<-(-max((N/100),7):-1)*mean(deltaResidual)
NegtailY<-gstar[1]+Negtailgrid*gstarprime[1]
Xplot<-c(Negtailgrid+Residualsorted[1],Residualsorted,tailgrid+Residualsorted[N])
Yplot<-c(NegtailY,gstar,tailY)
# tailY1<-gstar1[N]+tailgrid*gstarprime1[N]
# NegtailY1<-gstar1[1]+Negtailgrid*gstarprime1[1]
# Yplot1<-c(NegtailY1,gstar1,tailY1)
mydf = data.frame(X = Xplot, Y = Yplot)
plot0.obj <- ggplot(data=mydf)+geom_point(aes(x=X, y=Y), color="blue")+geom_line(aes(x=X, y=(sign(X)+1)*X/2))
#+geom_line(aes(x=X, y=Y1), color="green")
grid.arrange(plot0.obj)
gstars<-function(x,knots,gstar,gstarprime){
N<-length(knots)
deltaknots<-diff(knots)
secantslopes<-diff(gstar)/deltaknots
sumgprime<-gstarprime[-N]+gstarprime[-1]
sumgprime1<-2*gstarprime[-N]+gstarprime[-1]
gvalues<-rep(0, length(x))
index<-findInterval(x, knots)
gvalues[index==0]<-gstar[1]+gstarprime[1]*(x[index==0]-knots[1])
gvalues[index==N]<-gstar[N]+gstarprime[N]*(x[index==N]-knots[N])
cubicpts<-!index%in%c(0,N)
cubicindex<-index[cubicpts]
y<-(x[cubicpts]-knots[cubicindex])/deltaknots[cubicindex]
temp<-gstarprime[cubicindex]*y+(3*secantslopes[cubicindex]-sumgprime1[cubicindex])*y^2+(sumgprime[cubicindex]-2*secantslopes[cubicindex])*y^3
temp<-temp*deltaknots[cubicindex]+gstar[cubicindex]
gvalues[cubicpts]<-temp
return(gvalues)
}
x=(-1100:1100)/1000
tailgrid<-(1:max((N/100),7))*mean(deltaResidual)
tailY<-gstar[N]+tailgrid*gstarprime[N]
Negtailgrid<-(-max((N/100),7):-1)*mean(deltaResidual)
NegtailY<-gstar[1]+Negtailgrid*gstarprime[1]
Xplot<-c(Negtailgrid+Residualsorted[1],Residualsorted,tailgrid+Residualsorted[N],x)
Yplot<-c(NegtailY,gstar,tailY,gstars(x,Residualsorted,gstar,gstarprime))
mydf = data.frame(X = Xplot, Y = Yplot)
plot0.obj <- ggplot(data=mydf)+geom_point(aes(x=X, y=Y), color="blue")+geom_line(aes(x=X, y=(sign(X)+1)*X/2))
grid.arrange(plot0.obj)
library(ggplot2)
library(gridExtra)
library(Matrix)
#rm(list = ls())  # clear all variables in workspace
#graphics.off()  # clear all plots
#sample size
N<-1000
##set the penalization coefficient
lambda0 <-0.001
#additive noise
# Noises<-runif(N,-1,1)
Noises<-rnorm(N,0,1)
#Noises<-c(Noises,rnorm(50,0,1))
# #log-concave, mean=median=0, asymmetric
# Noises<-rnorm(N,0,1)
# negNoises<-Noises<0
# Noises<-runif(N,-2*sqrt(2/pi),0)*negNoises+Noises*(1-negNoises)
Residualsorted<-sort(Noises)
deltaResidual<-diff(Residualsorted)
lambda<-lambda0*2*N*sd(Noises)^3 #sd(X)^3: to make lambda scale invariant
# ####################TESTING BLOCK################################################################################
# A1 <- diag(x=-1, nrow = N-1, ncol = N)
# diag(A1[,-1]) <- 1
# B1 <- diag(x=1, nrow = N-1, ncol = N)
# diag(B1[,-1]) <- 1
# W1 <- diag(1/deltaResidual)
# TEMP1 <- solve(diag(N)+12*lambda*t(A1)%*%W1^3%*%A1, 6*lambda*t(A1)%*%W1^2%*%B1)
# gstarprime1 <- solve(lambda*(t(A1)%*%W1%*%A1+3*t(B1)%*%W1%*%B1)-6*lambda*t(B1)%*%W1^2%*%A1%*%TEMP1,rep(1,N))
# gstar1 <- TEMP1%*%gstarprime1
# ########################################################################################################################
A <- diag(N)
diag(A[-1,]) <- -1
B <- diag(N)
diag(B[-1,]) <- 1
W <- diag(c(0,1/deltaResidual))
v<-N:1
AAt_inv<-pmin(matrix(v, nrow=N, ncol=length(v), byrow=TRUE),matrix(v, nrow=N, ncol=length(v), byrow=FALSE))#solve(A%*%t(A))
A_Binv<-matrix(2,ncol=N,nrow=N)
A_Binv[upper.tri(A_Binv, diag = TRUE)]<-0
A_Binv<-A_Binv+diag(N)
A_Binv<-A_Binv*sign(toeplitz(1:N%%2)-0.5)#A%*%solve(B)
TEMP<-diag(c(1,deltaResidual^2))%*%AAt_inv+12*lambda*W
Schur<-TEMP[-1,-1]
Schur<-solve(Schur-matrix(TEMP[-1,1])%*%t(matrix(TEMP[1,-1]))/TEMP[1,1])
TEMP<--t(matrix(TEMP[1,-1]))%*%Schur/TEMP[1,1]
TEMP<-6*lambda*rbind(TEMP,Schur)
TEMP<-cbind(rep(0,N),TEMP)
gstarprime <- solve(lambda*(t(A_Binv)%*%W%*%A_Binv+3*W)-6*lambda*W^2%*%TEMP,(N:1)%%2)
# gstar=(g*(T1),...,g*(Tn)) is the negative score
# gstarprime=(g*'(T1),...,g*'(Tn))
gstarprime <- solve(lambda*(t(A_Binv)%*%W%*%A_Binv+3*W)-6*lambda*W^2%*%TEMP,(N:1)%%2)
gstar <- TEMP%*%gstarprime
gstarprime <- cumsum(gstarprime*sign((1:N)%%2-0.5))*sign((1:N)%%2-0.5)#solve(B)%*%gstarprime
gstar <- cumsum(gstar)#solve(A)%*%gstar
#sum(gstar) #check == 0
#############TESTING##########################
# TEMP1 <- solve(AAt_inv+12*lambda*W^3, 6*lambda*W^2)
# gstarprime1 <- solve(lambda*(t(A_Binv)%*%W%*%A_Binv+3*W)-6*lambda*W^2%*%TEMP1,(N:1)%%2)
# gstar1 <- TEMP1%*%gstarprime1
# gstarprime1 <- cumsum(gstarprime1*sign((1:N)%%2-0.5))*sign((1:N)%%2-0.5)
# gstar1 <- cumsum(gstar1)
####################################################
#############plot g*############
tailgrid<-(1:max((N/100),7))*mean(deltaResidual)
tailY<-gstar[N]+tailgrid*gstarprime[N]
Negtailgrid<-(-max((N/100),7):-1)*mean(deltaResidual)
NegtailY<-gstar[1]+Negtailgrid*gstarprime[1]
Xplot<-c(Negtailgrid+Residualsorted[1],Residualsorted,tailgrid+Residualsorted[N])
Yplot<-c(NegtailY,gstar,tailY)
# tailY1<-gstar1[N]+tailgrid*gstarprime1[N]
# NegtailY1<-gstar1[1]+Negtailgrid*gstarprime1[1]
# Yplot1<-c(NegtailY1,gstar1,tailY1)
mydf = data.frame(X = Xplot, Y = Yplot)
plot0.obj <- ggplot(data=mydf)+geom_point(aes(x=X, y=Y), color="blue")+geom_line(aes(x=X, y=(sign(X)+1)*X/2))
#+geom_line(aes(x=X, y=Y1), color="green")
grid.arrange(plot0.obj)
#
# gstars<-function(x,knots,gstar,gstarprime){
#   N<-length(knots)
#   deltaknots<-diff(knots)
#   secantslopes<-diff(gstar)/deltaknots
#   sumgprime<-gstarprime[-N]+gstarprime[-1]
#   sumgprime1<-2*gstarprime[-N]+gstarprime[-1]
#   gvalues<-rep(0, length(x))
#   index<-findInterval(x, knots)
#   gvalues[index==0]<-gstar[1]+gstarprime[1]*(x[index==0]-knots[1])
#   gvalues[index==N]<-gstar[N]+gstarprime[N]*(x[index==N]-knots[N])
#   cubicpts<-!index%in%c(0,N)
#   cubicindex<-index[cubicpts]
#   y<-(x[cubicpts]-knots[cubicindex])/deltaknots[cubicindex]
#   temp<-gstarprime[cubicindex]*y+(3*secantslopes[cubicindex]-sumgprime1[cubicindex])*y^2+(sumgprime[cubicindex]-2*secantslopes[cubicindex])*y^3
#   temp<-temp*deltaknots[cubicindex]+gstar[cubicindex]
#   gvalues[cubicpts]<-temp
#   return(gvalues)
# }
#
# x=(-1100:1100)/1000
#
# tailgrid<-(1:max((N/100),7))*mean(deltaResidual)
# tailY<-gstar[N]+tailgrid*gstarprime[N]
# Negtailgrid<-(-max((N/100),7):-1)*mean(deltaResidual)
# NegtailY<-gstar[1]+Negtailgrid*gstarprime[1]
# Xplot<-c(Negtailgrid+Residualsorted[1],Residualsorted,tailgrid+Residualsorted[N],x)
# Yplot<-c(NegtailY,gstar,tailY,gstars(x,Residualsorted,gstar,gstarprime))
#
# mydf = data.frame(X = Xplot, Y = Yplot)
# plot0.obj <- ggplot(data=mydf)+geom_point(aes(x=X, y=Y), color="blue")+geom_line(aes(x=X, y=(sign(X)+1)*X/2))
# grid.arrange(plot0.obj)
