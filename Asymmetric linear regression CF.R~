library(ggplot2)
library(gridExtra)
library(gnorm) #to generate generalized Gaussian

#rm(list = ls())  # clear all variables in workspace
#graphics.off()  # clear all plots

#sample size of each fold
N<-60
#number of folds
K<-3
#dimension of X
d<-2
#set beta_0
beta_0<-3*runif(d)+1
#set population mean of Y
mu<-2

##set the penalization coefficient
lambda0 <-0.0001

##generate data
X<-rnorm(K*N*d,0,1)

X<-array(X, c(N, d, K))
Y<-matrix(0,nrow = N, ncol = K)
for (i in 1:K) {
  Y[,i]<-X[,,i]%*%beta_0+mu
}
#additive noise
Noises<-runif(K*N,-1,1)
#Noises<-rnorm(K*N,0,1)
# #log-concave, mean=median=0, asymmetric
# Noises<-rnorm(K*N,0,1)
# negNoises<-Noises<0
# Noises<-runif(K*N,-2*sqrt(2/pi),0)*negNoises+Noises*(1-negNoises)


#Noises<-matrix(Noises,nrow = N, ncol = K) #redundant
Y<-Y+Noises
####K-fold cross-fitting: using one fold to estimate psi and 4 to estimate beta, and switching roles
##the normalized penalization coefficient
lambda<-lambda0*2*N*sd(X)^3 #sd(X)^3: to make lambda scale invariant
#######C[i,] = (-g*(T1),g*'(T1),...,g*'(Tn)) obtained on the i-th fold#######
C<-matrix(0,nrow = K, ncol = N+1)
Residualsorteds<-matrix(0,nrow = K, ncol = N)
deltaResiduals<-matrix(0,nrow = K, ncol = (N-1))
betapilots<-matrix(0,nrow = d+1, ncol = K)
for (i in 1:K) {
  Xtemp<-apply(X[,,-i], 2, identity)#row bind each data sheet; no standardization of the covariates (no subtraction of covariates' sample mean)
  Xtemp<-cbind(rep(1,(K-1)*N),Xtemp)
  Ytemp<-as.vector(Y[,-i])
  ###OLS as pilot estimator
  betapilots[,i]<-solve(t(Xtemp)%*%Xtemp,t(Xtemp)%*%Ytemp)#betapilot[1] is the intercept
  betapilot<-betapilots[,i]
  
  Residualsorteds[i,]<-sort(Y[,i]-X[,,i]%*%betapilot[-1]-betapilot[1])
  Residualsorted<-Residualsorteds[i,]
  deltaResiduals[i,]<-diff(Residualsorted)
  deltaResidual<-deltaResiduals[i,]
  u<-c(0,rep(1,N))
  D1<-t(matrix(replicate(N,c(2,deltaResidual)),ncol=N))
  D1[upper.tri(D1)] <- 0
  A<-diag(x=1, nrow = N, ncol = N+1)
  diag(A[-1,3:(N+1)])<-1
  A[1,1]<--1
  D2<-diag(1/deltaResidual*lambda) #lambda= lambda0*2*N*sd(X)^3
  B<-diag(x=1, nrow = N-1, ncol = N)
  diag(B[,-1])<--1
  Hess<-t(B)%*%D2%*%B
  Hess<-cbind(rep(0,N),Hess)
  Hess<-rbind(rep(0,N+1),Hess)
  Hess<-0.25*crossprod(D1%*%A)+Hess #Hess=0.5*Hessian of the objective function, (Hess%*%C-u)=0.5*gradient
  ##initialization
  #Ctemp = (-g(T_1),g'(T_1),g'(T_2),...,g'(T_N))
  # g is -psi, monotone increasing
  Ctemp<-solve(Hess,u)
  Ctemp[Ctemp<0]<-0 #projection
  ##projected Newton
  ###setting max number of iterations
  M<-9
  for (j in 1:M) {
    #cat("Newton loop loss",t(Ctemp)%*%Hess%*%Ctemp-2*t(u)%*%Ctemp,"i=",i,"\n")
    alpha<-1 #reset step size
    Free<-(Ctemp>0)|(Hess%*%Ctemp-u<=0)
    ###backtracking
    Ctemp1<-Ctemp
    gradient<-(Hess%*%Ctemp-u)[Free]
    Update<-solve(Hess[Free,Free],gradient)
    Ctemp1[Free]<-Ctemp[Free]-alpha*Update
    Ctemp1[Free][Ctemp1[Free]<0]<-0#projection
    while (t(Ctemp1)%*%Hess%*%Ctemp1-2*t(u)%*%Ctemp1>t(Ctemp)%*%Hess%*%Ctemp-2*t(u)%*%Ctemp+0.5*t((Ctemp1-Ctemp)[Free])%*%(2*gradient)) {
      alpha<-alpha*0.7
      Ctemp1[Free]<-Ctemp[Free]-alpha*Update
      Ctemp1[Free][Ctemp1[Free]<0]<-0#projection
    }
    ####termination criterion
    if (sum((Ctemp-Ctemp1)^2)<N*1e-13){
      Ctemp<-Ctemp1
      break
    }
    Ctemp<-Ctemp1
  }
  C[i,]<-Ctemp
}

#######gvalues[i,] = (g*(T1),...,g*(Tn)) obtained on the i-th fold#######
gvalues<-C[,-1]
gvalues<-gvalues[,-1]+gvalues[,-N]
gvalues<-0.5*gvalues*deltaResiduals
for (j in 2:(N-1)) {
  gvalues[,j]<-gvalues[,j]+gvalues[,j-1]
}
gvalues<-sweep(gvalues, 1, -C[,1], "+")
gvalues<-cbind(-C[,1],gvalues)
#rowSums(gvalues)
#############plot g*############
plotindex<-3 #in {1,...,K}
tailgrid<-(1:(N/100))*mean(deltaResiduals[plotindex,])
tailY<-gvalues[plotindex,N]+tailgrid*C[plotindex,N+1]
Negtailgrid<-(-(N/100):-1)*mean(deltaResiduals[plotindex,])
NegtailY<-gvalues[plotindex,1]+Negtailgrid*C[plotindex,2]
Xplot<-c(Negtailgrid+Residualsorteds[plotindex,1],Residualsorteds[plotindex,],tailgrid+Residualsorteds[plotindex,N])
Yplot<-c(NegtailY,gvalues[plotindex,],tailY)

mydf = data.frame(X = Xplot, Y = Yplot)
plot0.obj <- ggplot(data=mydf)+geom_point(aes(x=X, y=Y), color="red")+geom_line(aes(x=X, y=(sign(X)+1)*X/2), color="blue")
grid.arrange(plot0.obj)
####################################
###gbeta= - \nabla_{beta} sum_i loglikelihd(Y_i-<X_i,beta>), a vector
gbeta<-function(betahat,X,Y,cuts,gvalues,CC,deltaResidual){
  #deltaResidual<-diff(cuts)
  X<-cbind(rep(1,length(Y)),X)
  residual<-Y-X%*%betahat
  delta<-(residual)
  index<-findInterval(delta, cuts)
  index[index==0]<-1#left linear region
  Values<-gvalues[index] #g(left end point)
  distoleft<-delta-cuts[index]
  Values<-Values+distoleft*CC[index] #linear part
  quadpts<-index!=length(cuts)&index!=1
  quadindex<-index[quadpts]
  Values[quadpts]<-Values[quadpts]+0.5*(CC[quadindex+1]-CC[quadindex])*distoleft[quadpts]^2/deltaResidual[quadindex]
  Values<-t(Values)%*%(X)
  return(t(Values))
}
###gprimebeta = Hessian{ - sum_i loglikelihd(Y_i-<X_i,beta>)}
gprimebeta<-function(betahat,X,Y,cuts,gvalues,CC,deltaResidual){
  #deltaResidual<-diff(cuts)
  X<-cbind(rep(1,length(Y)),X)
  delta<-(Y-X%*%betahat)
  index<-findInterval(delta, cuts)
  index[index==0]<-1#left linear region
  Values<-CC[index] #g(left end point)
  quadpts<-index!=length(cuts)&index!=1
  quadindex<-index[quadpts]
  distoleft<-delta-cuts[index]
  Values[quadpts]<-Values[quadpts]+(CC[quadindex+1]-CC[quadindex])*distoleft[quadpts]/deltaResidual[quadindex]
  Values<--t(X)%*%diag(Values)%*%X
  return(Values)
}
####################algebraic average of thetahat_k####################
Xtemp<-apply(X[,,], 2, identity)#row bind each data sheet; no standardization of the data
Xtemp<-cbind(rep(1,K*N),Xtemp)
Ytemp<-as.vector(Y[,])
###OLS as pilot estimator
betaOLS<-solve(t(Xtemp)%*%Xtemp,t(Xtemp)%*%Ytemp)

betahat<-betaOLS #initialization
for (k in 1:K) {
  betatemp<-betaOLS #initialization
  #######gbeta<-function(betahat,X,Y,cuts,gvalues,C,deltaResidual)
  X1<-apply(X[,,-k], 2, identity)#row bind each data sheet
  Y1<-as.vector(Y[,-k])
  cuts<-Residualsorteds[k,]
  g<-gvalues[k,]
  CCk<-C[k,-1]
  deltaResidual<-deltaResiduals[k,]
  ##finding zero
  for (l in 1:5) {
    alpha<-1
    gvalue1<-gbeta(betatemp,X1,Y1,cuts,g,CCk,deltaResidual)
    Update<-solve(gprimebeta(betatemp,X1,Y1,cuts,g,CCk,deltaResidual),gvalue1)
    betatemp<-betatemp-alpha*Update
  }
  #print(sum(gbeta(betatemp,X1,Y1,cuts,g,CCk,deltaResidual)^2))
  betahat<-betahat+betatemp
}
betahat<-betahat/K

################################################################################
####################zero of sum_k g_k(X^{(-k)}-theta)####################
####primitive, no backtracking####
# Xtemp<-apply(X[,,], 2, identity)#row bind each data sheet; no standardization of the data
# Xtemp<-cbind(rep(1,K*N),Xtemp)
# Ytemp<-as.vector(Y[,])
# ###OLS as pilot estimator
# betaOLS<-solve(t(Xtemp)%*%Xtemp,t(Xtemp)%*%Ytemp)

betahat2<-betaOLS #initialization
for (J in 1:7) {
  gbetahat<-0
  gprimebetahat<-rep(0,d+1)
  for (k in 1:K) {
    X1<-apply(X[,,-k], 2, identity)#row bind each data sheet
    Y1<-as.vector(Y[,-k])
    cuts<-Residualsorteds[k,]
    g<-gvalues[k,]
    CCk<-C[k,-1]
    deltaResidual<-deltaResiduals[k,]
    gbetahat<-gbetahat+gbeta(betahat2,X1,Y1,cuts,g,CCk,deltaResidual)
    gprimebetahat<-gprimebetahat+gprimebeta(betahat2,X1,Y1,cuts,g,CCk,deltaResidual)
  }
  betahat2<-betahat2-solve(gprimebetahat,gbetahat)
  # cat("gbetahat2=",gbetahat2,"\n")
  print(sum(gbetahat^2))
}
abs(betahat-c(mu,beta_0))
abs(betahat2-c(mu,beta_0))
abs(betaOLS-c(mu,beta_0))

################################################################################